<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲: <a href="https://mdecp2024.github.io/hw-zxc41323234/content/index.html">https://mdecp2024.github.io/hw-zxc41323234/content/index.html</a></p>
<p>個人網站: <a href="https://github.com/mdecp2024/hw-zxc41323234">https://github.com/mdecp2024/hw-zxc41323234</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<p></p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<h3>w7</h3>
<p></p>
<p>以下影片說明如何在作業網站加入Bython，同時練習print與for迴圈的用法</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/OX3gu4eDyFo" width="560"></iframe></p>
<h3>w10</h3>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/jgOHbPIjuLo?si=qohiAzhvQmJvbyQb" title="YouTube video player" width="560"></iframe></p>
<h3>w12_hw</h3>
<p>第一題:Text, questions, and art (文字、問題和藝術)</p>
<p>說明:Strings, input(), and print() (字串、input()和print())</p>
<p><span>input()程式範例:<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/e9a23b0259fc1a27e6c12dc28e8cc8c72eb7f37a/w12">What's your name?</a></span></p>
<p>print()範例程式：<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/4c7237e48764c8070b19f4c3371637aca67dc87e/w12.1">貓貓</a><span></span></p>
<p><span><em>第二題：變數</em></span></p>
<p><span><em>Q2-1範例程式：<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/b8dd22aefda45c41091a1fb86a847b5a4cfa5b0f/w12.2">姓名</a></em></span></p>
<p><span><em>Q2-2範例程式：<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/bbc122d868007ba77782259993865ad3b6f1e270/12.3">名字和喜歡的食物</a></em></span></p>
<p><em>第三題：if判斷式</em></p>
<p><em><span>Q3範例程式：<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/cf7f43dab233dd220650a4a80428a90aafcf1b47/12.3">book store</a></span></em></p>
<p><em><span>第四題：append()和remove()</span></em></p>
<p><em><span>Q4範例程式：<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/a632a78342fef98dfd720c48f6e41965d3291561/w12.4">購物清單</a></span></em></p>
<p>第五題:<em>index().pop()和insert()</em></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/2eaadfd017f35ba710aee2eb73de0ee5b3d635e6/w12.5">菜單</a></p>
<p>第六題:<em>切片取值</em></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/ff9f2b46995a95f1f19457a27a8f3804971677af/w12.6">city</a></p>
<p></p>
<p><span></span></p><h3>w13_hw</h3>
<p>12/4</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/5525ada9e34f762ed639ebe0509fecd062cfa1f0/w13">一個格子</a></p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/5525ada9e34f762ed639ebe0509fecd062cfa1f0/w13_hw">兩個格子</a></p>
<p><a href="https://mdecp2024.github.io/hw-zxc41323234/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/dbb19f39fcf0f7b1e3fe4503cd750c7e47d48193/W13">圓形重疊</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src='//www.youtube.com/embed/6J4oWFY7uOo?si=J0D_ddF4Lkhpjjt2" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen&gt;&lt;/iframe&gt;' width="560"></iframe></p><h3>w14_ex</h3>
<p>課堂作業</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
 
# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
    ctx = canvas.getContext("2d")
    return canvas, ctx
 
# 定義一個隨機顏色生成函式
def random_color_generator():
    """
    生成一個隨機的 RGB 顏色字符串。
    返回的顏色是 "rgb(r, g, b)" 格式，其中 r, g, b 是 0 到 255 之間的隨機整數。
    """
    r = random.randint(0, 255)  # 隨機生成紅色成分 (0-255)
    g = random.randint(0, 255)  # 隨機生成綠色成分 (0-255)
    b = random.randint(0, 255)  # 隨機生成藍色成分 (0-255)
    return f"rgb({r}, {g}, {b})"  # 返回隨機顏色字符串
 
# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    """
    判斷一個點 (px, py) 是否位於圓 (cx, cy, r) 內。
    (cx, cy) 為圓心坐標，r 為圓的半徑。
    """
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2
 
# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    """
    根據傳入的三個圓的圓心和半徑，繪製圓形並使用掃描線算法填充區域。
    x1, y1, r1 是圓1的圓心坐標和半徑
    x2, y2, r2 是圓2的圓心坐標和半徑
    x3, y3, r3 是圓3的圓心坐標和半徑
    """
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    color_dict = {}
 
    for py in range(0, canvas.height):  # 遍歷每一行的 y 坐標
        current_color = None 
        for px in range(0, canvas.width):  # 遍歷每一列的 x 坐標
            # 判斷該點是否在圓1內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            # 判斷該點是否在圓2內
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            # 判斷該點是否在圓3內
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
 
            if in_circle1 and in_circle2 and in_circle3:
                # 如果點同時在三個圓內，則是三圓交集區域
                if "intersection" not in color_dict:
                    color_dict["intersection"] = random_color_generator()
                current_color = color_dict["intersection"]
            elif in_circle1 and in_circle2:
                # 如果點在圓1和圓2的交集區域
                if "circle1_circle2" not in color_dict:
                    color_dict["circle1_circle2"] = random_color_generator()
                current_color = color_dict["circle1_circle2"]
            elif in_circle1 and in_circle3:
                # 如果點在圓1和圓3的交集區域
                if "circle1_circle3" not in color_dict:
                    color_dict["circle1_circle3"] = random_color_generator()
                current_color = color_dict["circle1_circle3"]
            elif in_circle2 and in_circle3:
                # 如果點在圓2和圓3的交集區域
                if "circle2_circle3" not in color_dict:
                    color_dict["circle2_circle3"] = random_color_generator()
                current_color = color_dict["circle2_circle3"]
            elif in_circle1:
                # 如果點只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 如果點只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 如果點只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 如果點不在任何圓內，則是背景區域
                current_color = "white"  # 背景色設為白色
 
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素
 
# 設定三個圓的圓心座標和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 100, 100  # 圓3：圓心 (200, 100)，半徑 100
 
# 呼叫畫圓函式，並繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)</pre>
<p></p>
<p><span>請根據兩個圓繪圖所圍成的區域</span><span>(目前圍成三個區域, 但若圓心移動可能彼此獨立)進行不同顏色著色, 條件是當各圓半徑與圓心座標變動時, 程式只需輸入兩個圓的圓心座標與半徑, 就可以完成各<a href="https://mdecp2024.github.io/hw-zxc41323234/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/1bbe4a2db71be123ae1889eda60cb949acbc465a/12.3">區域</a>的著色任務.</span></p>
<p><a href="https://mdecp2024.github.io/hw-zxc41323234/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/c58bb90145a57b1c27ac4c8ca047161b39e7c783/w12">Ans</a></p><h3>w15</h3>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/7a0e5c928f63c9f0f1257cbeb8d5cac447abd6d5/w15">題目一</a>:從1加到100</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/e2588c41e2c258f89f6c3fd1e134a940a178f22c/w15.1">題目二</a>:addto</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/2f871aa50a4c84635e0d314bf87804229d338177/w15.2">題目三</a>:oniy even</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/64a7cfd05fc3dece681d315bc363c62bc5048d8d/w15.3">題目四</a>:avoid 8</p>
<p></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p><h2>HW 2 Exam</h2>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-zxc41323234/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/088befeb261285c0641a479161ec9bd4/raw/267ed9fa3cb47df28d87a09a286615ed8ac46292/w16">exam2</a></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math
  
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document &lt;= canvas
  
# 設置畫布和上下文
def get_canvas_context():
    canvas = document["my_canvas"]
    return canvas, canvas.getContext("2d")
  
# 绘制坐标轴和原点标签
def draw_axes(ctx, origin_x, origin_y):
    # 绘制 X 轴
    ctx.beginPath()
    ctx.moveTo(origin_x, origin_y)
    ctx.lineTo(500, origin_y)
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.stroke()
  
    # 绘制 Y 轴
    ctx.beginPath()
    ctx.moveTo(origin_x, origin_y)
    ctx.lineTo(origin_x, 300)
    ctx.stroke()
  
    # 标记原点
    ctx.font = "12px Arial"
    ctx.fillStyle = "black"
    ctx.fillText("(32, 34)", origin_x + 5, origin_y - 5)
  
# 绘制不同的形状
def draw_shapes(ctx):
    # 绘制六边形（红色）
    hex_x, hex_y = 100, 100
    ctx.beginPath()
    for i in range(6):
        angle = i * (2 * math.pi / 6)
        x = hex_x + 30 * math.cos(angle)
        y = hex_y + 30 * math.sin(angle)
        if i == 0:
            ctx.moveTo(x, y)
        else:
            ctx.lineTo(x, y)
    ctx.closePath()
    ctx.fillStyle = "red"  # 改為紅色
    ctx.fill()
  
    # 绘制菱形（紫色）
    ctx.beginPath()
    ctx.moveTo(160, 70)
    ctx.lineTo(180, 100)
    ctx.lineTo(160, 130)
    ctx.lineTo(140, 100)
    ctx.closePath()
    ctx.fillStyle = "purple"  # 改為紫色
    ctx.fill()
  
    # 绘制三角形（绿色）
    ctx.beginPath()
    ctx.moveTo(165, 130)
    ctx.lineTo(205, 130)
    ctx.lineTo(185, 100)
    ctx.closePath()
    ctx.fillStyle = "green"  # 改為綠色
    ctx.fill()
  
    # 绘制圆形（黄色）
    ctx.beginPath()
    ctx.arc(230, 100, 30, 0, 2 * math.pi)
    ctx.fillStyle = "yellow"  # 改為黃色
    ctx.fill()
  
    # 绘制正方形（蓝色）
    ctx.beginPath()
    ctx.rect(265, 75, 50, 50)
    ctx.fillStyle = "blue"  # 改為藍色
    ctx.fill()
  
    # 绘制矩形（橙色）
    ctx.beginPath()
    ctx.rect(320, 90, 60, 20)
    ctx.fillStyle = "orange"  # 改為橙色
    ctx.fill()
  
# 主程式
def main():
    setup_canvas()
    canvas, ctx = get_canvas_context()
  
    # 设置原点坐标
    origin_x, origin_y = 32, 34
  
    # 绘制坐标轴和原点标签
    draw_axes(ctx, origin_x, origin_y)
  
    # 绘制各种形状
    draw_shapes(ctx)
  
# 运行主程式
main()</pre>
<p></p>
<p></p>
<p></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w6</h3>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">#help(range)
for i in range(1,5):
    print(i)
def print_star_pyramid(rows):
    for i in range(rows):
        # 打印空格
        print(' ' * (rows - i - 1), end='')
        # 打印星星
        print('*' * (2 * i + 1))
# 設定金字塔的行數
rows = 0
print_number_pyramid(rows)</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">    *
   ***
  *****
 *******
*********
</pre>
<p></p>
<h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-zxc41323234/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/621afddc8d1845623e196842186ca576/raw/3ef20b0b4659e856ad483ceb55893112623d5439/w16.2">exam3</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math
  
  
def draw_maze(angle_degrees):
    # 创建和添加画布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas
  
    # 获取绘图上下文
    ctx = canvas.getContext("2d")
  
    # 设置绘图参数
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 34 * 2
    # 整体向右移动的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)
  
    # 定义迷宫线条
    lines = [
        ((0, 0), (1, 0)),
        ((2, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((2, 3), (4, 3)),
        ((1, 3), (1, 5)),
        ((3, 3), (3, 2)),
        ((0, 0), (0, 5)),
        ((0, 5), (2, 5)),
        ((2, 5), (2, 4)),
        ((2, 4), (3, 4)),
        ((0, 2), (1, 2)),
        ((2, 2), (2, 1)),
        ((0, 1), (4, 1)),
        ((4, 1), (4, 2)),
    ]
  
    # 旋转并绘制迷宫线条
    ctx.strokeStyle = "blue"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]
  
        # 旋转起点坐标
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)
  
        # 旋转终点坐标
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)
  
        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()
  
    return ctx, offset_x + move_right_offset, offset_y
  
  
def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文本位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋转后的文本位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 34)", 10, - 15)
    ctx.restore()
  
  
if __name__ == "__main__":
    # 调整迷宫角度，这里设置为30度，可以根据需要修改
    maze_angle = 0
    # 文本角度
    text_angle = 0
    ctx, offset_x, offset_y = draw_maze(maze_angle)
    label_coordinate(ctx, offset_x, offset_y, text_angle)
</pre>
<p><br/><br/></p><h3>w11_hw</h3>
<p>第一題:<a href="https://mdecp2024.github.io/hw-zxc41323234/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/08f44479c16b4095eb4fb6e4478706583e457a36/w11.py">圓形區域</a></p>
<p>第二題:<a href="https://mdecp2024.github.io/hw-zxc41323234/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/aabafa32a8d8d3b5660e7b60c2b47a4398090373/w11(2).py">數字列</a></p>
<p>          <a href="https://mdecp2024.github.io/hw-zxc41323234/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/5213042f46fe8b90bbdcecf3312baa09/raw/d3b1622e912d65e8f2dd803f85e0315318158cf5/w11(3)">格子練習</a></p>
<p></p>
<p>影片</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/BWPSJKddV4U" width="560"></iframe></p>
<p>心得</p>
<p>這是我第一次使用 Brython讓 Python 可以在瀏覽器中執行的工具。在過去，我更多的是在本地環境使用 Python，但現在我學會了如何將它應用到網頁開發中。利用 <code>canvas</code> API 繪製圖形是一個新的挑戰，特別是在設定畫布的大小、繪製方格和填充顏色方面</p>
<p></p>
<p></p><h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p></p>
<h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-zxc41323234/content/Brython.html?src=https://gist.githubusercontent.com/zxc41323234/7c402beebf60b75a117381e778b2b3de/raw/3c9115a801bcbcf2185c2514f8936c1b11ff94f6/w16.3">exam4</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math
   
   
def draw_maze(angle_degrees):
    # 创建和添加画布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas
   
    # 获取绘图上下文
    ctx = canvas.getContext("2d")
   
    # 设置绘图参数
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 34 * 2
    # 整体向右移动的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)
   
    # 定义迷宫线条
    lines = [
        ((0, 0), (1, 0)),
        ((2, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((2, 3), (4, 3)),
        ((1, 3), (1, 5)),
        ((3, 3), (3, 2)),
        ((0, 0), (0, 5)),
        ((0, 5), (2, 5)),
        ((2, 5), (2, 4)),
        ((2, 4), (3, 4)),
        ((0, 2), (1, 2)),
        ((2, 2), (2, 1)),
        ((0, 1), (4, 1)),
        ((4, 1), (4, 2)),
    ]
   
    # 旋转并绘制迷宫线条
    ctx.strokeStyle = "blue"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]
   
        # 旋转起点坐标
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)
   
        # 旋转终点坐标
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)
   
        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()
   
    return ctx, offset_x + move_right_offset, offset_y, pixel_scale
   
   
def find_path():
    # 简单的路径示例，这里假设的路径，实际需要更复杂的算法
    # 为了维持原本迷宫路线，这里路径假设不破坏迷宫已有路线
    path = [
        ((1.5, 0), (1.5, 0.5)),
        ((1.5, 0.5), (4.5, 0.5)),
        ((4.5, 0.5), (4.5, 2.5)),
        ((4.5, 2.5), (3.5, 2.5)),
        ((3.5, 2.5), (3.5, 1.5)),
        ((3.5, 1.5), (2.5, 1.5)),
        ((2.5, 1.5), (2.5, 2.5)),
        ((2.5, 2.5), (1.5, 2.5)),
        ((1.5, 2.5), (1.5, 3.5)),
        ((1.5, 3.5), (3.5, 3.5)),
        ((3.5, 3.5), (3.5, 4.5)),
        ((3.5, 4.5), (2.5, 4.5)),
        ((2.5, 4.5), (2.5, 5))
    ]
    return path
   
   
def draw_path(ctx, offset_x, offset_y, angle_degrees, path, pixel_scale):
    angle_radians = math.radians(angle_degrees)
    ctx.strokeStyle = "red"
    ctx.lineWidth = 2
    for line in path:
        start = line[0]
        end = line[1]
   
        # 旋转起点坐标
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)
   
        # 旋转终点坐标
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)
   
        ctx.beginPath()
        ctx.moveTo(
            offset_x + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()
   
   
def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文本位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋转后的文本位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 34)", 10, - 15)
    ctx.restore()
   
   
if __name__ == "__main__":
    # 调整迷宫角度，这里设置为30度，可以根据需要修改
    maze_angle = 0
    # 文本角度
    text_angle = 0
    ctx, offset_x, offset_y, pixel_scale = draw_maze(maze_angle)
    path = find_path()
    draw_path(ctx, offset_x, offset_y, maze_angle, path, pixel_scale)
    label_coordinate(ctx, offset_x, offset_y, text_angle)
</pre>
<p></p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<p style="padding-left: 30px;"></p>
<p style="padding-left: 30px;"></p>
<p style="padding-left: 30px;"></p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>